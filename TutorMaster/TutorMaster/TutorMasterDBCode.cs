#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class TutorMasterDB : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertClasses(Classes instance);
  partial void UpdateClasses(Classes instance);
  partial void DeleteClasses(Classes instance);
  partial void InsertCommitments(Commitments instance);
  partial void UpdateCommitments(Commitments instance);
  partial void DeleteCommitments(Commitments instance);
  partial void InsertFaculty(Faculty instance);
  partial void UpdateFaculty(Faculty instance);
  partial void DeleteFaculty(Faculty instance);
  partial void InsertFacultyClasses(FacultyClasses instance);
  partial void UpdateFacultyClasses(FacultyClasses instance);
  partial void DeleteFacultyClasses(FacultyClasses instance);
  partial void InsertStudentClasses(StudentClasses instance);
  partial void UpdateStudentClasses(StudentClasses instance);
  partial void DeleteStudentClasses(StudentClasses instance);
  partial void InsertStudentCommitments(StudentCommitments instance);
  partial void UpdateStudentCommitments(StudentCommitments instance);
  partial void DeleteStudentCommitments(StudentCommitments instance);
  partial void InsertStudents(Students instance);
  partial void UpdateStudents(Students instance);
  partial void DeleteStudents(Students instance);
  partial void InsertTutorRequests(TutorRequests instance);
  partial void UpdateTutorRequests(TutorRequests instance);
  partial void DeleteTutorRequests(TutorRequests instance);
  partial void InsertUsers(Users instance);
  partial void UpdateUsers(Users instance);
  partial void DeleteUsers(Users instance);
  #endregion
	
	public TutorMasterDB(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TutorMasterDB(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TutorMasterDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TutorMasterDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Classes> Classes
	{
		get
		{
			return this.GetTable<Classes>();
		}
	}
	
	public System.Data.Linq.Table<Commitments> Commitments
	{
		get
		{
			return this.GetTable<Commitments>();
		}
	}
	
	public System.Data.Linq.Table<Faculty> Faculty
	{
		get
		{
			return this.GetTable<Faculty>();
		}
	}
	
	public System.Data.Linq.Table<FacultyClasses> FacultyClasses
	{
		get
		{
			return this.GetTable<FacultyClasses>();
		}
	}
	
	public System.Data.Linq.Table<StudentClasses> StudentClasses
	{
		get
		{
			return this.GetTable<StudentClasses>();
		}
	}
	
	public System.Data.Linq.Table<StudentCommitments> StudentCommitments
	{
		get
		{
			return this.GetTable<StudentCommitments>();
		}
	}
	
	public System.Data.Linq.Table<Students> Students
	{
		get
		{
			return this.GetTable<Students>();
		}
	}
	
	public System.Data.Linq.Table<TutorRequests> TutorRequests
	{
		get
		{
			return this.GetTable<TutorRequests>();
		}
	}
	
	public System.Data.Linq.Table<Users> Users
	{
		get
		{
			return this.GetTable<Users>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Classes : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ClassCode;
	
	private string _ClassName;
	
	private string _Department;
	
	private EntitySet<FacultyClasses> _FacultyClasses;
	
	private EntitySet<StudentClasses> _StudentClasses;
	
	private EntitySet<TutorRequests> _TutorRequests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    #endregion
	
	public Classes()
	{
		this._FacultyClasses = new EntitySet<FacultyClasses>(new Action<FacultyClasses>(this.attach_FacultyClasses), new Action<FacultyClasses>(this.detach_FacultyClasses));
		this._StudentClasses = new EntitySet<StudentClasses>(new Action<StudentClasses>(this.attach_StudentClasses), new Action<StudentClasses>(this.detach_StudentClasses));
		this._TutorRequests = new EntitySet<TutorRequests>(new Action<TutorRequests>(this.attach_TutorRequests), new Action<TutorRequests>(this.detach_TutorRequests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ClassCode
	{
		get
		{
			return this._ClassCode;
		}
		set
		{
			if ((this._ClassCode != value))
			{
				this.OnClassCodeChanging(value);
				this.SendPropertyChanging();
				this._ClassCode = value;
				this.SendPropertyChanged("ClassCode");
				this.OnClassCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(100)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this.OnClassNameChanging(value);
				this.SendPropertyChanging();
				this._ClassName = value;
				this.SendPropertyChanged("ClassName");
				this.OnClassNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(100)")]
	public string Department
	{
		get
		{
			return this._Department;
		}
		set
		{
			if ((this._Department != value))
			{
				this.OnDepartmentChanging(value);
				this.SendPropertyChanging();
				this._Department = value;
				this.SendPropertyChanged("Department");
				this.OnDepartmentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassesToFaculty", Storage="_FacultyClasses", ThisKey="ClassCode", OtherKey="ClassCode", DeleteRule="CASCADE")]
	public EntitySet<FacultyClasses> FacultyClasses
	{
		get
		{
			return this._FacultyClasses;
		}
		set
		{
			this._FacultyClasses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassesToStudents", Storage="_StudentClasses", ThisKey="ClassCode", OtherKey="ClassCode", DeleteRule="CASCADE")]
	public EntitySet<StudentClasses> StudentClasses
	{
		get
		{
			return this._StudentClasses;
		}
		set
		{
			this._StudentClasses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassToRequest", Storage="_TutorRequests", ThisKey="ClassCode", OtherKey="ClassCode", DeleteRule="CASCADE")]
	public EntitySet<TutorRequests> TutorRequests
	{
		get
		{
			return this._TutorRequests;
		}
		set
		{
			this._TutorRequests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FacultyClasses(FacultyClasses entity)
	{
		this.SendPropertyChanging();
		entity.Classes = this;
	}
	
	private void detach_FacultyClasses(FacultyClasses entity)
	{
		this.SendPropertyChanging();
		entity.Classes = null;
	}
	
	private void attach_StudentClasses(StudentClasses entity)
	{
		this.SendPropertyChanging();
		entity.Classes = this;
	}
	
	private void detach_StudentClasses(StudentClasses entity)
	{
		this.SendPropertyChanging();
		entity.Classes = null;
	}
	
	private void attach_TutorRequests(TutorRequests entity)
	{
		this.SendPropertyChanging();
		entity.Classes = this;
	}
	
	private void detach_TutorRequests(TutorRequests entity)
	{
		this.SendPropertyChanging();
		entity.Classes = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Commitments : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CmtID;
	
	private string _StartTime;
	
	private string _EndTime;
	
	private string _Class;
	
	private string _Location;
	
	private string _Weekly;
	
	private EntitySet<StudentCommitments> _StudentCommitments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCmtIDChanging(int value);
    partial void OnCmtIDChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnWeeklyChanging(string value);
    partial void OnWeeklyChanged();
    #endregion
	
	public Commitments()
	{
		this._StudentCommitments = new EntitySet<StudentCommitments>(new Action<StudentCommitments>(this.attach_StudentCommitments), new Action<StudentCommitments>(this.detach_StudentCommitments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CmtID
	{
		get
		{
			return this._CmtID;
		}
		set
		{
			if ((this._CmtID != value))
			{
				this.OnCmtIDChanging(value);
				this.SendPropertyChanging();
				this._CmtID = value;
				this.SendPropertyChanged("CmtID");
				this.OnCmtIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="NVarChar(100)")]
	public string StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="NVarChar(100)")]
	public string EndTime
	{
		get
		{
			return this._EndTime;
		}
		set
		{
			if ((this._EndTime != value))
			{
				this.OnEndTimeChanging(value);
				this.SendPropertyChanging();
				this._EndTime = value;
				this.SendPropertyChanged("EndTime");
				this.OnEndTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="NVarChar(100)")]
	public string Class
	{
		get
		{
			return this._Class;
		}
		set
		{
			if ((this._Class != value))
			{
				this.OnClassChanging(value);
				this.SendPropertyChanging();
				this._Class = value;
				this.SendPropertyChanged("Class");
				this.OnClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(100)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekly", DbType="NVarChar(100)")]
	public string Weekly
	{
		get
		{
			return this._Weekly;
		}
		set
		{
			if ((this._Weekly != value))
			{
				this.OnWeeklyChanging(value);
				this.SendPropertyChanging();
				this._Weekly = value;
				this.SendPropertyChanged("Weekly");
				this.OnWeeklyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CmtToStudents", Storage="_StudentCommitments", ThisKey="CmtID", OtherKey="CmtID", DeleteRule="CASCADE")]
	public EntitySet<StudentCommitments> StudentCommitments
	{
		get
		{
			return this._StudentCommitments;
		}
		set
		{
			this._StudentCommitments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StudentCommitments(StudentCommitments entity)
	{
		this.SendPropertyChanging();
		entity.Commitments = this;
	}
	
	private void detach_StudentCommitments(StudentCommitments entity)
	{
		this.SendPropertyChanging();
		entity.Commitments = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Department;
	
	private EntitySet<FacultyClasses> _FacultyClasses;
	
	private EntityRef<Users> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    #endregion
	
	public Faculty()
	{
		this._FacultyClasses = new EntitySet<FacultyClasses>(new Action<FacultyClasses>(this.attach_FacultyClasses), new Action<FacultyClasses>(this.detach_FacultyClasses));
		this._Users = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(100)")]
	public string Department
	{
		get
		{
			return this._Department;
		}
		set
		{
			if ((this._Department != value))
			{
				this.OnDepartmentChanging(value);
				this.SendPropertyChanging();
				this._Department = value;
				this.SendPropertyChanged("Department");
				this.OnDepartmentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FacultyToClasses", Storage="_FacultyClasses", ThisKey="ID", OtherKey="FacultyID", DeleteRule="NO ACTION")]
	public EntitySet<FacultyClasses> FacultyClasses
	{
		get
		{
			return this._FacultyClasses;
		}
		set
		{
			this._FacultyClasses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersToFaculty", Storage="_Users", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.Faculty = null;
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.Faculty = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FacultyClasses(FacultyClasses entity)
	{
		this.SendPropertyChanging();
		entity.Faculty = this;
	}
	
	private void detach_FacultyClasses(FacultyClasses entity)
	{
		this.SendPropertyChanging();
		entity.Faculty = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class FacultyClasses : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Key;
	
	private System.Nullable<int> _FacultyID;
	
	private string _ClassCode;
	
	private EntityRef<Classes> _Classes;
	
	private EntityRef<Faculty> _Faculty;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(int value);
    partial void OnKeyChanged();
    partial void OnFacultyIDChanging(System.Nullable<int> value);
    partial void OnFacultyIDChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    #endregion
	
	public FacultyClasses()
	{
		this._Classes = default(EntityRef<Classes>);
		this._Faculty = default(EntityRef<Faculty>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Key
	{
		get
		{
			return this._Key;
		}
		set
		{
			if ((this._Key != value))
			{
				this.OnKeyChanging(value);
				this.SendPropertyChanging();
				this._Key = value;
				this.SendPropertyChanged("Key");
				this.OnKeyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int")]
	public System.Nullable<int> FacultyID
	{
		get
		{
			return this._FacultyID;
		}
		set
		{
			if ((this._FacultyID != value))
			{
				if (this._Faculty.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFacultyIDChanging(value);
				this.SendPropertyChanging();
				this._FacultyID = value;
				this.SendPropertyChanged("FacultyID");
				this.OnFacultyIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassCode", DbType="NVarChar(100)")]
	public string ClassCode
	{
		get
		{
			return this._ClassCode;
		}
		set
		{
			if ((this._ClassCode != value))
			{
				if (this._Classes.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassCodeChanging(value);
				this.SendPropertyChanging();
				this._ClassCode = value;
				this.SendPropertyChanged("ClassCode");
				this.OnClassCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassesToFaculty", Storage="_Classes", ThisKey="ClassCode", OtherKey="ClassCode", IsForeignKey=true)]
	public Classes Classes
	{
		get
		{
			return this._Classes.Entity;
		}
		set
		{
			Classes previousValue = this._Classes.Entity;
			if (((previousValue != value) 
						|| (this._Classes.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classes.Entity = null;
					previousValue.FacultyClasses.Remove(this);
				}
				this._Classes.Entity = value;
				if ((value != null))
				{
					value.FacultyClasses.Add(this);
					this._ClassCode = value.ClassCode;
				}
				else
				{
					this._ClassCode = default(string);
				}
				this.SendPropertyChanged("Classes");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FacultyToClasses", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
	public Faculty Faculty
	{
		get
		{
			return this._Faculty.Entity;
		}
		set
		{
			Faculty previousValue = this._Faculty.Entity;
			if (((previousValue != value) 
						|| (this._Faculty.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Faculty.Entity = null;
					previousValue.FacultyClasses.Remove(this);
				}
				this._Faculty.Entity = value;
				if ((value != null))
				{
					value.FacultyClasses.Add(this);
					this._FacultyID = value.ID;
				}
				else
				{
					this._FacultyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Faculty");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class StudentClasses : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _ClassCode;
	
	private EntityRef<Classes> _Classes;
	
	private EntityRef<Students> _Students;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    #endregion
	
	public StudentClasses()
	{
		this._Classes = default(EntityRef<Classes>);
		this._Students = default(EntityRef<Students>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Students.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ClassCode
	{
		get
		{
			return this._ClassCode;
		}
		set
		{
			if ((this._ClassCode != value))
			{
				if (this._Classes.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassCodeChanging(value);
				this.SendPropertyChanging();
				this._ClassCode = value;
				this.SendPropertyChanged("ClassCode");
				this.OnClassCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassesToStudents", Storage="_Classes", ThisKey="ClassCode", OtherKey="ClassCode", IsForeignKey=true, DeleteOnNull=true)]
	public Classes Classes
	{
		get
		{
			return this._Classes.Entity;
		}
		set
		{
			Classes previousValue = this._Classes.Entity;
			if (((previousValue != value) 
						|| (this._Classes.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classes.Entity = null;
					previousValue.StudentClasses.Remove(this);
				}
				this._Classes.Entity = value;
				if ((value != null))
				{
					value.StudentClasses.Add(this);
					this._ClassCode = value.ClassCode;
				}
				else
				{
					this._ClassCode = default(string);
				}
				this.SendPropertyChanged("Classes");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsToClasses", Storage="_Students", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Students Students
	{
		get
		{
			return this._Students.Entity;
		}
		set
		{
			Students previousValue = this._Students.Entity;
			if (((previousValue != value) 
						|| (this._Students.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Students.Entity = null;
					previousValue.StudentClasses.Remove(this);
				}
				this._Students.Entity = value;
				if ((value != null))
				{
					value.StudentClasses.Add(this);
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("Students");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class StudentCommitments : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CmtID;
	
	private int _ID;
	
	private System.Nullable<int> _Status;
	
	private EntityRef<Commitments> _Commitments;
	
	private EntityRef<Students> _Students;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCmtIDChanging(int value);
    partial void OnCmtIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public StudentCommitments()
	{
		this._Commitments = default(EntityRef<Commitments>);
		this._Students = default(EntityRef<Students>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CmtID
	{
		get
		{
			return this._CmtID;
		}
		set
		{
			if ((this._CmtID != value))
			{
				if (this._Commitments.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCmtIDChanging(value);
				this.SendPropertyChanging();
				this._CmtID = value;
				this.SendPropertyChanged("CmtID");
				this.OnCmtIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Students.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CmtToStudents", Storage="_Commitments", ThisKey="CmtID", OtherKey="CmtID", IsForeignKey=true, DeleteOnNull=true)]
	public Commitments Commitments
	{
		get
		{
			return this._Commitments.Entity;
		}
		set
		{
			Commitments previousValue = this._Commitments.Entity;
			if (((previousValue != value) 
						|| (this._Commitments.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Commitments.Entity = null;
					previousValue.StudentCommitments.Remove(this);
				}
				this._Commitments.Entity = value;
				if ((value != null))
				{
					value.StudentCommitments.Add(this);
					this._CmtID = value.CmtID;
				}
				else
				{
					this._CmtID = default(int);
				}
				this.SendPropertyChanged("Commitments");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsToCmt", Storage="_Students", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Students Students
	{
		get
		{
			return this._Students.Entity;
		}
		set
		{
			Students previousValue = this._Students.Entity;
			if (((previousValue != value) 
						|| (this._Students.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Students.Entity = null;
					previousValue.StudentCommitments.Remove(this);
				}
				this._Students.Entity = value;
				if ((value != null))
				{
					value.StudentCommitments.Add(this);
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("Students");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<bool> _Tutee;
	
	private System.Nullable<bool> _Tutor;
	
	private EntitySet<StudentClasses> _StudentClasses;
	
	private EntitySet<StudentCommitments> _StudentCommitments;
	
	private EntitySet<TutorRequests> _TutorRequests;
	
	private EntityRef<Users> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTuteeChanging(System.Nullable<bool> value);
    partial void OnTuteeChanged();
    partial void OnTutorChanging(System.Nullable<bool> value);
    partial void OnTutorChanged();
    #endregion
	
	public Students()
	{
		this._StudentClasses = new EntitySet<StudentClasses>(new Action<StudentClasses>(this.attach_StudentClasses), new Action<StudentClasses>(this.detach_StudentClasses));
		this._StudentCommitments = new EntitySet<StudentCommitments>(new Action<StudentCommitments>(this.attach_StudentCommitments), new Action<StudentCommitments>(this.detach_StudentCommitments));
		this._TutorRequests = new EntitySet<TutorRequests>(new Action<TutorRequests>(this.attach_TutorRequests), new Action<TutorRequests>(this.detach_TutorRequests));
		this._Users = default(EntityRef<Users>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				if (this._Users.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tutee", DbType="Bit")]
	public System.Nullable<bool> Tutee
	{
		get
		{
			return this._Tutee;
		}
		set
		{
			if ((this._Tutee != value))
			{
				this.OnTuteeChanging(value);
				this.SendPropertyChanging();
				this._Tutee = value;
				this.SendPropertyChanged("Tutee");
				this.OnTuteeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tutor", DbType="Bit")]
	public System.Nullable<bool> Tutor
	{
		get
		{
			return this._Tutor;
		}
		set
		{
			if ((this._Tutor != value))
			{
				this.OnTutorChanging(value);
				this.SendPropertyChanging();
				this._Tutor = value;
				this.SendPropertyChanged("Tutor");
				this.OnTutorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsToClasses", Storage="_StudentClasses", ThisKey="ID", OtherKey="ID", DeleteRule="CASCADE")]
	public EntitySet<StudentClasses> StudentClasses
	{
		get
		{
			return this._StudentClasses;
		}
		set
		{
			this._StudentClasses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsToCmt", Storage="_StudentCommitments", ThisKey="ID", OtherKey="ID", DeleteRule="CASCADE")]
	public EntitySet<StudentCommitments> StudentCommitments
	{
		get
		{
			return this._StudentCommitments;
		}
		set
		{
			this._StudentCommitments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentToRequest", Storage="_TutorRequests", ThisKey="ID", OtherKey="StudentID", DeleteRule="CASCADE")]
	public EntitySet<TutorRequests> TutorRequests
	{
		get
		{
			return this._TutorRequests;
		}
		set
		{
			this._TutorRequests.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersToStudents", Storage="_Users", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Users Users
	{
		get
		{
			return this._Users.Entity;
		}
		set
		{
			Users previousValue = this._Users.Entity;
			if (((previousValue != value) 
						|| (this._Users.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Users.Entity = null;
					previousValue.Students = null;
				}
				this._Users.Entity = value;
				if ((value != null))
				{
					value.Students = this;
					this._ID = value.ID;
				}
				else
				{
					this._ID = default(int);
				}
				this.SendPropertyChanged("Users");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StudentClasses(StudentClasses entity)
	{
		this.SendPropertyChanging();
		entity.Students = this;
	}
	
	private void detach_StudentClasses(StudentClasses entity)
	{
		this.SendPropertyChanging();
		entity.Students = null;
	}
	
	private void attach_StudentCommitments(StudentCommitments entity)
	{
		this.SendPropertyChanging();
		entity.Students = this;
	}
	
	private void detach_StudentCommitments(StudentCommitments entity)
	{
		this.SendPropertyChanging();
		entity.Students = null;
	}
	
	private void attach_TutorRequests(TutorRequests entity)
	{
		this.SendPropertyChanging();
		entity.Students = this;
	}
	
	private void detach_TutorRequests(TutorRequests entity)
	{
		this.SendPropertyChanging();
		entity.Students = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class TutorRequests : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _StudentID;
	
	private string _ClassCode;
	
	private EntityRef<Classes> _Classes;
	
	private EntityRef<Students> _Students;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnClassCodeChanging(string value);
    partial void OnClassCodeChanged();
    #endregion
	
	public TutorRequests()
	{
		this._Classes = default(EntityRef<Classes>);
		this._Students = default(EntityRef<Students>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Students.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ClassCode
	{
		get
		{
			return this._ClassCode;
		}
		set
		{
			if ((this._ClassCode != value))
			{
				if (this._Classes.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassCodeChanging(value);
				this.SendPropertyChanging();
				this._ClassCode = value;
				this.SendPropertyChanged("ClassCode");
				this.OnClassCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassToRequest", Storage="_Classes", ThisKey="ClassCode", OtherKey="ClassCode", IsForeignKey=true, DeleteOnNull=true)]
	public Classes Classes
	{
		get
		{
			return this._Classes.Entity;
		}
		set
		{
			Classes previousValue = this._Classes.Entity;
			if (((previousValue != value) 
						|| (this._Classes.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classes.Entity = null;
					previousValue.TutorRequests.Remove(this);
				}
				this._Classes.Entity = value;
				if ((value != null))
				{
					value.TutorRequests.Add(this);
					this._ClassCode = value.ClassCode;
				}
				else
				{
					this._ClassCode = default(string);
				}
				this.SendPropertyChanged("Classes");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentToRequest", Storage="_Students", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Students Students
	{
		get
		{
			return this._Students.Entity;
		}
		set
		{
			Students previousValue = this._Students.Entity;
			if (((previousValue != value) 
						|| (this._Students.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Students.Entity = null;
					previousValue.TutorRequests.Remove(this);
				}
				this._Students.Entity = value;
				if ((value != null))
				{
					value.TutorRequests.Add(this);
					this._StudentID = value.ID;
				}
				else
				{
					this._StudentID = default(int);
				}
				this.SendPropertyChanged("Students");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Email;
	
	private string _PhoneNumber;
	
	private string _AccountType;
	
	private string _Password;
	
	private string _Username;
	
	private EntityRef<Faculty> _Faculty;
	
	private EntityRef<Students> _Students;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public Users()
	{
		this._Faculty = default(EntityRef<Faculty>);
		this._Students = default(EntityRef<Students>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(100)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="NVarChar(100)")]
	public string AccountType
	{
		get
		{
			return this._AccountType;
		}
		set
		{
			if ((this._AccountType != value))
			{
				this.OnAccountTypeChanging(value);
				this.SendPropertyChanging();
				this._AccountType = value;
				this.SendPropertyChanged("AccountType");
				this.OnAccountTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100)")]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersToFaculty", Storage="_Faculty", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
	public Faculty Faculty
	{
		get
		{
			return this._Faculty.Entity;
		}
		set
		{
			Faculty previousValue = this._Faculty.Entity;
			if (((previousValue != value) 
						|| (this._Faculty.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Faculty.Entity = null;
					previousValue.Users = null;
				}
				this._Faculty.Entity = value;
				if ((value != null))
				{
					value.Users = this;
				}
				this.SendPropertyChanged("Faculty");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersToStudents", Storage="_Students", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
	public Students Students
	{
		get
		{
			return this._Students.Entity;
		}
		set
		{
			Students previousValue = this._Students.Entity;
			if (((previousValue != value) 
						|| (this._Students.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Students.Entity = null;
					previousValue.Users = null;
				}
				this._Students.Entity = value;
				if ((value != null))
				{
					value.Users = this;
				}
				this.SendPropertyChanged("Students");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
